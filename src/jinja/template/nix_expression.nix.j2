{%- filter nixfmt %}
{%- if config.autogen_warning != None %}
    {{- config.autogen_warning }}
{%- endif %}
{ pkgs, lib }:

let
  inherit (pkgs.stdenv) isDarwin isLinux isi686 isx86_64 isAarch32 isAarch64;
  vscode-utils = pkgs.vscode-utils;
  merge = lib.attrsets.recursiveUpdate;
in
merge
(merge
(merge
(merge{
    {%- for item in extensions %}
    {%- if item.asset_url != None %}
    {%- with uniqueId = [ item.publisher | to_string, '.', item.name | to_string ] | join %}
        {{ uniqueId }} = (vscode-utils.buildVscodeExtension {
          name = "{{ item.publisher }}.{{ item.name }}";
          vscodeExtPublisher = "{{ item.publisher }}";
          vscodeExtName = "{{ item.name }}";
          src = (pkgs.fetchurl {
            url = "{{ item.asset_url }}";
            sha256 = "{{ item.sha256 }}";
            name = "{{ item.publisher }}.{{ item.name }}.zip";
          }).outPath;
          vscodeExtUniqueId = "{{ item.publisher }}.{{ item.name }}";
          version = "{{ item.version }}";
          {% if item.name == "cpptools" %}
              postPatch =
                ''
                  # Prevent download/install of extensions
                  touch "./install.lock"

                  # Patching binaries
                  chmod +x bin/cpptools bin/cpptools-srv bin/cpptools-wordexp debugAdapters/bin/OpenDebugAD7 LLVM/bin/clang-format LLVM/bin/clang-tidy
                '' +lib.optionalString isLinux ''
                  chmod +x bin/libc.so
                '' +lib.optionalString isDarwin ''
                ''
              ;
          {% endif %}
        });
    {%- endwith %}
    {%- endif %}
    {%- endfor %}

    {%- for item in extensions %}
    {%- if item.asset_url == None %}
    {%- with uniqueId = [ item.publisher | to_string, '.', item.name | to_string ] | join %}
        {%- if is_universal(item.platform) %}
        {{ uniqueId }} = vscode-utils.extensionFromVscodeMarketplace {
          name = "{{ item.name }}";
          publisher = "{{ item.publisher }}";
          version = "{{ item.version }}";
          sha256 = "{{ item.sha256 }}";
          {% if item.name == "cpptools" %}
              postPatch =
                ''
                  # Prevent download/install of extensions
                  touch "./install.lock"

                  # Patching binaries
                  chmod +x bin/cpptools bin/cpptools-srv bin/cpptools-wordexp debugAdapters/bin/OpenDebugAD7 LLVM/bin/clang-format LLVM/bin/clang-tidy
                '' +lib.optionalString isLinux ''
                  chmod +x bin/libc.so
                '' +lib.optionalString isDarwin ''
                ''
              ;
          {% endif %}
        };
        {%- endif %}
    {%- endwith %}
    {%- endif %}
    {%- endfor %}
}
(lib.attrsets.optionalAttrs(isLinux && (isi686 || isx86_64) ){
    {%- for item in extensions %}
    {%- if item.asset_url == None %}
    {%- with uniqueId = [ item.publisher | to_string, '.', item.name | to_string ] | join %}
        {%- if is_linux_x86(item.platform) %}
        {{ uniqueId }} = vscode-utils.extensionFromVscodeMarketplace {
          name = "{{ item.name }}";
          publisher = "{{ item.publisher }}";
          version = "{{ item.version }}";
          sha256 = "{{ item.sha256 }}";
          arch = "linux-x64";
          {% if item.name == "cpptools" %}
              postPatch =
                ''
                  # Prevent download/install of extensions
                  touch "./install.lock"

                  # Patching binaries
                  chmod +x bin/cpptools bin/cpptools-srv bin/cpptools-wordexp debugAdapters/bin/OpenDebugAD7 LLVM/bin/clang-format LLVM/bin/clang-tidy
                '' +lib.optionalString isLinux ''
                  chmod +x bin/libc.so
                '' +lib.optionalString isDarwin ''
                ''
              ;
          {% endif %}
        };
        {%- endif %}
    {%- endwith %}
    {%- endif %}
    {%- endfor %}
}))
(lib.attrsets.optionalAttrs(isLinux && (isAarch32 || isAarch64) ){
    {%- for item in extensions %}
    {%- if item.asset_url == None %}
    {%- with uniqueId = [ item.publisher | to_string, '.', item.name | to_string ] | join %}
        {%- if is_linux_arm(item.platform) %}
        {{ uniqueId }} = vscode-utils.extensionFromVscodeMarketplace {
          name = "{{ item.name }}";
          publisher = "{{ item.publisher }}";
          version = "{{ item.version }}";
          sha256 = "{{ item.sha256 }}";
          arch = "linux-arm64";
          {% if item.name == "cpptools" %}
              postPatch =
                ''
                  # Prevent download/install of extensions
                  touch "./install.lock"

                  # Patching binaries
                  chmod +x bin/cpptools bin/cpptools-srv bin/cpptools-wordexp debugAdapters/bin/OpenDebugAD7 LLVM/bin/clang-format LLVM/bin/clang-tidy
                '' +lib.optionalString isLinux ''
                  chmod +x bin/libc.so
                '' +lib.optionalString isDarwin ''
                ''
              ;
          {% endif %}
        };
        {%- endif %}
    {%- endwith %}
    {%- endif %}
    {%- endfor %}
}))
(lib.attrsets.optionalAttrs(isDarwin && (isi686 || isx86_64) ){
    {%- for item in extensions %}
    {%- if item.asset_url == None %}
    {%- with uniqueId = [ item.publisher | to_string, '.', item.name | to_string ] | join %}
        {%- if is_darwin_x86(item.platform) %}
        {{ uniqueId }} = vscode-utils.extensionFromVscodeMarketplace {
          name = "{{ item.name }}";
          publisher = "{{ item.publisher }}";
          version = "{{ item.version }}";
          sha256 = "{{ item.sha256 }}";
          arch = "darwin-x64";
          {% if item.name == "cpptools" %}
              postPatch =
                ''
                  # Prevent download/install of extensions
                  touch "./install.lock"

                  # Patching binaries
                  chmod +x bin/cpptools bin/cpptools-srv bin/cpptools-wordexp debugAdapters/bin/OpenDebugAD7 LLVM/bin/clang-format LLVM/bin/clang-tidy
                '' +lib.optionalString isLinux ''
                  chmod +x bin/libc.so
                '' +lib.optionalString isDarwin ''
                ''
              ;
          {% endif %}
        };
        {%- endif %}
    {%- endwith %}
    {%- endif %}
    {%- endfor %}
}))
(lib.attrsets.optionalAttrs(isDarwin && (isAarch32 || isAarch64) ){
    {%- for item in extensions %}
    {%- if item.asset_url == None %}
    {%- with uniqueId = [ item.publisher | to_string, '.', item.name | to_string ] | join %}
        {%- if is_darwin_arm(item.platform) %}
        {{ uniqueId }} = vscode-utils.extensionFromVscodeMarketplace {
          name = "{{ item.name }}";
          publisher = "{{ item.publisher }}";
          version = "{{ item.version }}";
          sha256 = "{{ item.sha256 }}";
          arch = "darwin-arm64";
          {% if item.name == "cpptools" %}
              postPatch =
                ''
                  # Prevent download/install of extensions
                  touch "./install.lock"

                  # Patching binaries
                  chmod +x bin/cpptools bin/cpptools-srv bin/cpptools-wordexp debugAdapters/bin/OpenDebugAD7 LLVM/bin/clang-format LLVM/bin/clang-tidy
                '' +lib.optionalString isLinux ''
                  chmod +x bin/libc.so
                '' +lib.optionalString isDarwin ''
                ''
              ;
          {% endif %}
        };
        {%- endif %}
    {%- endwith %}
    {%- endif %}
    {%- endfor %}
})
{%- endfilter %}
